"""
Урок 2. Циклы. Рекурсия. Функции

1. Написать программу, которая будет складывать, вычитать, умножать или делить два числа.
Числа и знак операции вводятся пользователем. После выполнения вычисления
программа не должна завершаться, а должна запрашивать новые данные для вычислений.
Завершение программы должно выполняться при вводе символа '0' в качестве знака операции.
Если пользователь вводит неверный знак (не '0', '+', '-', '*', '/'),
то программа должна сообщать ему об ошибке и снова запрашивать знак операции.
Также сообщать пользователю о невозможности деления на ноль, если он ввел 0 в качестве
делителя.
"""

while True:
    sign = input('Введите тип операции (+, -, *, /, 0 - завершение программы): ')
    if sign == '0':
        print ('Программа завершена')
        break

    a = input('Введите первое число: ')
    b = input('Введите второе число: ')
    if sign in ('+', '-', '*', '/'):
        if sign == '+':
            print (f'Результат выражения {a} + {b} = {int(a) + int(b)}')
        elif sign == '-':
            print (f'Результат выражения {a} - {b} = {int(a) - int(b)}')
        elif sign == '*':
            print (f'Результат выражения {a} * {b} = {int(a) * int(b)}')
        elif sign == '/':
            if b == '0':
                print(f'На 0 делить нельзя')
            else:
                print (f'Результат выражения {a} / {b} = {int(a) / int(b)}')
    else:
        print('Не верно указан тип операции')

"""
2. Посчитать четные и нечетные цифры введенного натурального числа. Например,
если введено число 34560, то у него 3 четные цифры (4, 6 и 0) и 2 нечетные (3 и 5).
"""


def numbers_even_uneven(num):
    num_even = ''
    num_uneven = ''
    for i in num:
        if int(i) % 2 == 0:
            num_even += i
        else:
            num_uneven += i
    return (f'Количество чётных цифр в числе {num}: {len(num_even)}\n'
            f'Количество нечётных цифр в числе {num}: {len(num_uneven)}')


if __name__ == '__main__':
    print(numbers_even_uneven(str(input(f'Введите любое число: '))))

"""
3. Сформировать из введенного числа обратное по порядку входящих в него цифр
и вывести на экран. Например, если введено число 3486, то надо вывести число 6843.
"""


def number_backwards(num):
    num_backwards = ''
    if num <= 0:
        return ('Не корректно введено значение')
    else:
        while num > 0:
            num_backwards += str(num % 10)
            num //= 10
        return (f'Введённое число наоборот: {int(num_backwards)}')


if __name__ == '__main__':
    try:
        print(number_backwards(int(input('Введите любое число больше 0: '))))
    except ValueError:
        print ('Введено не число')

"""
4. Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...
Количество элементов (n) вводится с клавиатуры.
"""


def number_row(num):
    n = 1
    numbers = 1
    if num <= 0:
        return ('Не корректно введено значение')
    else:
        while num > 1:
            n /= -2
            numbers += n
            num -= 1
        return (f'Сумма элементов числа 1: {numbers}\n'
                f'{numbers}')


if __name__ == '__main__':
    try:
        print(number_row(int(input('Введите количество элементов: '))))
    except ValueError:
        print ('Введено не число')

"""
5. Вывести на экран коды и символы таблицы ASCII, начиная с символа
под номером 32 и заканчивая 127-м включительно. Вывод выполнить
в табличной форме: по десять пар "код-символ" в каждой строке.
"""

for i in range(32, 128):
    print(f'{ord(chr(i))}-{chr(i)}', end='  ')
    if i % 10 == 0:
        print()

"""
6. В программе генерируется случайное целое число от 0 до 100.
Пользователь должен его отгадать не более чем за 10 попыток.
После каждой неудачной попытки должно сообщаться больше или меньше
введенное пользователем число, чем то, что загадано.
Если за 10 попыток число не отгадано, то вывести загаданное число.
"""

import random

random_num = random.randint(0, 100)
game_start = input('Угадайте число от 0 до 100 за 10 попыток. Нажмите "s" для начала игры: ')
try:
    if game_start == 's':
        i = 1
        answer = int(input('Угадайте число от 0 до 100: '))
        while i < 10:
            if answer > random_num:
                answer = int(input(f'Попробуйте ещё раз. Загаданное число меньше {answer}: '))
            elif answer < random_num:
                answer = int(input(f'Попробуйте ещё раз. Загаданное число больше {answer}: '))
            else:
                print(f'Вы угадали!')
                break
            i += 1
        print(f'Правильный ответ {random_num}')
    else:
          print('Пока')
except ValueError:
    print('Ошибка. Вы ыыели не цифру')

"""
7. Напишите программу, доказывающую или проверяющую, что для
множества натуральных чисел выполняется равенство: 1+2+...+n = n(n+1)/2,
где n - любое натуральное число.
"""


def natural_num(n):
    sum_natural_num = 0
    i = n
    while i > 0:
        sum_natural_num += i
        i -= 1
    if sum_natural_num == int(n * (n + 1) / 2):
        print(f'Для множества натуральных чисел выполняется равенство: '
              f'1+2+...+{n} = {n}({n}+1)/2) = {sum_natural_num}')
    else:
        print(f'Равенство не выполняется')


if __name__ == '__main__':
    natural_num(int(12))

"""
8. Посчитать, сколько раз встречается определенная цифра
в введенной последовательности чисел. Количество вводимых чисел и цифра,
которую необходимо посчитать, задаются вводом с клавиатуры.
"""


def numbers_count(number, n):
    num_count = 0
    while number > 0:
        if number % 10 == n:
            num_count += 1
        number //= 10
    return (f'Количество цифр "{n}": {num_count}')


if __name__ == '__main__':
    print(numbers_count(int(input('Введите любое большое число: ')),
                        int(input(f'Введите цифру (от 0 до 9), чтобы посчитать '
                                  f'сколько раз она встречается в числе: '))))

"""
9. Среди натуральных чисел, которые были введены, найти наибольшее
по сумме цифр. Вывести на экран это число и сумму его цифр.
"""


def sum_natural_numbers(*args):
    nums = 0
    number = 0
    for n in args:
        max_number = args[args.index(n)]
        sum_num = 0
        for i in str(n):
            sum_num += n % 10
            n //= 10
        if sum_num > nums:
            nums = sum_num
            number = max_number
    print (f'Число {number} имеет максимальную сумму цифр: {nums}')


if __name__ == '__main__':
    sum_natural_numbers(125489999999, 121212, 999, 62598498429841)
